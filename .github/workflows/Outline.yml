name: Convert LaTeX to HTML
on:
  push:
    branches:
      - main

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Outline repository
        uses: actions/checkout@v3
        with:
          repository: tomoto0/Outline
          path: Outline

      - name: Checkout tomoto0.github.io repository
        uses: actions/checkout@v3
        with:
          repository: tomoto0/tomoto0.github.io
          path: tomoto0.github.io

      - name: Cache TeX Live packages
        uses: actions/cache@v2
        with:
          path: /usr/share/texlive
          key: ${{ runner.os }}-texlive-${{ hashFiles('**/Outline.tex') }}
          restore-keys: |
            ${{ runner.os }}-texlive-

      - name: Install TeX Live and additional tools
        if: steps.cache-texlive.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
          sudo apt-get install -y pandoc
          sudo apt-get install -y librsvg2-bin

      - name: Create Lua filter for TikZ conversion
        run: |
          cat << EOF > tikz-to-svg.lua
          local function tikz_to_svg(src, filetype, attr)
            local tmp = os.tmpname()
            local tmpdir = string.match(tmp, "^(.*[\\/])") or "."
            local f = io.open(tmp .. ".tex", "w")
            f:write("\\documentclass{standalone}\n\\usepackage{tikz}\n\\begin{document}\n")
            f:write(src)
            f:write("\n\\end{document}")
            f:close()
            os.execute(string.format("pdflatex -output-directory %s %s", tmpdir, tmp .. ".tex"))
            os.execute(string.format("pdf2svg %s.pdf %s.svg", tmp, tmp))
            local svg = io.open(tmp .. ".svg", "r")
            local svgcontent = svg:read("*all")
            svg:close()
            os.remove(tmp .. ".tex")
            os.remove(tmp .. ".pdf")
            os.remove(tmp .. ".svg")
            os.remove(tmp .. ".aux")
            os.remove(tmp .. ".log")
            return pandoc.RawBlock('html', svgcontent)
          end

          return {
            {
              CodeBlock = function(el)
                if el.classes[1] == "tikz" then
                  return tikz_to_svg(el.text, "svg", el.attr)
                end
              end,
            }
          }
          EOF

      - name: Convert LaTeX to HTML
        run: |
          pandoc ./Outline/Outline.tex -o ./tomoto0.github.io/outline.html \
            --standalone \
            --mathjax \
            --css=https://latex.vercel.app/style.css \
            --highlight-style=pygments \
            --lua-filter=./Outline/custom-filter.lua \
            --lua-filter=tikz-to-svg.lua

      - name: Add additional CSS and scripts
        run: |
          title=$(grep -m 1 '\\title{' ./Outline/Outline.tex | sed 's/\\title{$$.*$$}/\1/')
          sed -i "s/<title>.*<\/title>/<title>$title<\/title>/" ./tomoto0.github.io/outline.html
          sed -i '/<style>/r'<(cat << EOF
            .latex-dark-auto {
              --bg-color: #ffffff;
              --text-color: #333333;
            }
            @media (prefers-color-scheme: dark) {
              .latex-dark-auto {
                --bg-color: #222222;
                --text-color: #dddddd;
              }
            }
            body {
              background-color: var(--bg-color);
              color: var(--text-color);
            }
            svg {
              max-width: 100%;
              height: auto;
            }
          EOF
          ) ./tomoto0.github.io/outline.html

      - name: Commit and push changes
        run: |
          cd ./tomoto0.github.io
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add outline.html
          git commit -m 'Convert LaTeX to HTML with improved styling and embedded SVG figures'
          git push

    env:
      GITHUB_TOKEN: ${{ secrets.PAT_FOR_OUTLINE_REPO }}
